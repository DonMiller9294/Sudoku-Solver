import tkinter as tk

def is_valid(board, row, col, num):
    #check to see if the number is already in the row, column, or the 3x3 grid
    for i in range(9):
        if board[row][i] == num or board[i][col] == num:
            return False

    start_row, start_col = 3* (row//3), 3*(col//3)
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j ] == num:
                return False

    return True

def find_empty_cell(board):
    # Find an empty cell in the board 
    for i in range(9):
        for j in range(9):
            if board[i][j] == 0:
                return i, j
    return none

def solve_sudoku(board):
    empty_cell = find_empty_cell(board)
    if not empty_cell:
        return True # puzzle is solved

    for num in range(1,10):
        if is_valid(board,row,col,num):
            board[row][col] = num

            if solve_sudoku(board):
                return True 

            board[row][col] = 0 # Backtrack if the current number doesn't lead to a solution

    return False # No valid number found, trigger backtracking

def solve_and_update_gui():
    global sudoku_board
    for i in range(9):
        for j in range(9):
            entry = entries[i][j]
            if entry.get():
                sudoku_board[i][j] = int(entry.get())
            else:
                sudoku_board[i][j] = 0

    if solve_sudoku(sudoku_board):
        for i in range(9):
            for j in range(9):
                entries[i][j].delete(0, tk.END)
                entries[i][j].insert(0, str(sudoku_board[i][j]))

    else:
        print("No Solution Found.")

# You can replace this example with your sudoku puzzle
sudoku_board = [
    [5, 5, 5, 4, 3, 6, 7, 2, 1],
    [2, 3, 4, 5, 7, 9, 0, 4, 2],
    [1, 3, 4, 8, 6, 5, 4, 3, 5],
    [1, 2, 2, 2, 2, 4, 5, 5, 4],
    [1, 4, 6, 5, 5, 2, 3 ,1, 2],
    [1, 2, 1, 3, 3, 3, 3, 3, 3],
    [2, 3, 3, 3, 3, 1, 2, 3, 5],
    [0, 8, 9, 7, 8, 6, 5, 4, 3],
    [1, 2, 4, 5, 6, 7, 8, 9, 9],
]

root=tk.Tk()
root.title("Sudoku Solver")

entries = [[tk.Entry(root, width=3, font=("Arial", 20)) for _ in range(9)] for _ in range(9)]

for i in range(9):
    for j in range(9):
        entries[i][j].grid(row=i, column=j)

solve_button = tk.Button(root, text="Solve", command=solve_and_update_gui)
solve_button.grid(row=9, column=0, columnspan=9)

for i in range(9):
    for j in range(9):
        if sudoku_board[i][j] != 0:
            entries[i][j].insert(0, str(sudoku_board[i][j]))
            entries[i][j].config(state=tk.DISABLED)

root.mainloop()




